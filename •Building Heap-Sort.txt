â€¢ Building Heap-Sort:
   1- Loop from the last non-leaf node to the root node
   2- For each node, call the Heap function to maintain the heap property
   3- Start Sorting The Heap :
       3.1- Swap the maximum element(root) with the last element of the current heap
       3.2- Reduce the heap size by 1
       3.3- Call the Heap function on the root to restore the heap property
       3.4- Repeat this process until all elements are sorted
   4- Start at a given node 
       4.1- Calculate the left and right child
       4.2- Compare the current node with its children(If the left or the right child is larger, mark it as the new largest node)
       4.3- If the largest node is not the current node, swap them and recursively call Heapify on the updated child

------------------------------------------------------------------------------------------------------------------------
- Pseudocode   -
	
HEAP_SORT(arr):
	 n = length(arr)
	   
	 for (i = n / 2 - 1 down to 0)
	{
	     HEAPIFY(arr, n, i)
	 }   

	 for (i = n - 1 down to 1)
	{
	     SWAP(arr[0], arr[i])   
	     HEAPIFY(arr, i, 0)   
	 }   

	 RETURN arr
	
HEAPIFY(arr, n, i)
	{
	 root = i
	 left = 2 * i + 1
	 right = 2 * i + 2
	 }
   
	 if (left < n AND arr[left] > arr[root])
	{
	     root = left
	}

	 if (right < n AND arr[right] > arr[root])
	{	
	     root = right
	 }  
 
	 if (root != i)
	{
	     SWAP(arr[i], arr[root])
	     HEAPIFY(arr, n, root)
	}

SWAP(arr, i, j)
	{
	 temp = arr[i]
	 arr[i] = arr[j]
	 arr[j] = temp
	}

PRINT(arr)
	{
	 for each element in arr:
	     print element
	}